---
layout: post
title:  "Interactive diabolo"
date:   2014-09-31 14:00:00
categories: openframeworks
header-img: "interactive_diabolo_header.png"
tags: [openFrameworks, particle system, interactive, diabolo, SuperCollider]
---

As part of my last year of study in the Art, Science and Technology Masters at Grenoble INP, I had to realize a project that mixed art, science and technology. I worked with Thomas Moncond'huy on a project of interactive juggling with a diabolo. We had about three months to develop our project and zero budget. 

We are both juggling amateurs and we liked the idea of visuals and sounds generated by juggling tricks, thus making the juggling experience interactive. We divided our project in three parts: tracking of the diabolo and the hands of the juggler, sound generation and image generation. 

Tracking program
----------------

The tracking program was in charge of recognizing the trick made by the juggler and sending it to the sound and image generation programs. 

The juggler makes a diabolo trick with a combination of movements of the sticks causing the diabolo to have a particular movement. However, a diabolo trick is not only a particular movement of the diabolo, you have also to consider the movements of the sticks and the juggler. 

To achieve this trick recognition, we needed a way for tracking the movements of the diabolo and the sticks.

<div class="figure">
	<img src="/img/posts/interactive_diabolo_tracking_diagram.png" alt="Tracking diagram">
	<p>Tracking program diagram</p>
</div>

### Diabolo and hands tracking

This is probably the part that took us the most time, testing and searching for a way of tracking the positions of the diabolo and the hands of the juggler. 

First, inspired by Johnny Chung Lee's [Wiimote tracking system](http://johnnylee.net/projects/wii/) we attached infrared LEDs to the diabolo and the end of the sticks and tracked them with a Wiimote. The tracking was very nice and fluid, but unfortunately there was spatial limitations that were too important: the LEDs emission cone and the Wiimote's reception cone were too narrow. It means that the sticks and the diabolo had to point to the Wiimote to be tracked, which is impossible if you want to do interesting tricks with the diabolo. Moreover, the width and height of the space where the tracking was correct was too small comparing to the space needed for doing diabolo tricks.

So we needed to find another method for the tracking. 

First, we wanted to track the end of the sticks, which are the most relevant moving parts during a diabolo trick, but it was difficult and we had little time. So we decided to track the hands of the juggler. It was a relevant approximation for basic tricks.

OpenNI for hands / Color tracking with jitter for diabolo


### Juggling trick recognition

The trick recognition was, well, tricky. 

That's why we used a sequencer. Thereby, a trick could only be detected if it was programmed in the sequencer.

Sequencer

<div class="figure">
	<img src="/img/posts/interactive_diabolo_sequencer.png" alt="Sequencer">
	<p>Sequencer screenshot</p>
</div>

Sound and image generation
----------------

### Sound generation

The sound generation was done using SuperCollider. We had several instruments that were triggered and modulated according to the events sent via OSC from the tracking program. 

 This part was developed by Thomas Moncond'huy so I will not enter the specifics of it. 

### Image generation


The idea of the visualization was to materialize the interaction that the juggler could feel with the diabolo. We rapidly chose to use a particle system because it was easy to develop and fun to play with.

The particles were rendered with an additive blending as it is a good way of visualizing the particle density (higher density, brighter color). Two post processing effects were added: a trail to the particles using an FBO and a glowing effect using the [ofxPostProcessing](https://github.com/neilmendoza/ofxPostProcessing) addon.

The visualization program receives the positions of the hands and the diabolo sent from the tracking program via OSC. The positions of the hands are materialized with two blue discs, and the diabolo with a red disc. The particles are able to move between the diabolo disc and the two hands discs as shown below:

<div class="figure">
	<img src="/img/posts/interactive_diabolo_visualization.png" alt="Particles visualization">
	<p>Particles visualization principle</p>
</div>

The visualization is a basic particle system. It uses the diabolo and hands positions sent from the tracking program via OSC and map them to particle attractors. There are 3 attractors, one for each hand and one for the diabolo.


<div class="figure">
	<a href="/img/posts/interactive_diabolo_particles1.png" data-lightbox="particles1" alt="Particles image generation">
		<img src="/img/posts/interactive_diabolo_particles1.png" alt="Particles image generation">
	</a>
</div>

<div class="figure">
	<a href="/img/posts/interactive_diabolo_particles2.png" data-lightbox="particles2" alt="Particles image generation">
		<img src="/img/posts/interactive_diabolo_particles2.png" alt="Particles image generation">
	</a>
</div>

Conclusion
----------

very fun to do
oF on a real project
lot of improvments
- better trick detection (remove sequencer)
- events in image generation
